#!/bin/bash

git rev-parse --is-inside-work-tree >> /dev/null 2>&1

if [[ ! $? -eq 0 ]]; then
    echo "Not inside a git repo"
    exit 1
fi

if [[ ! -z "$1" && -f "$1" ]]; then
    read -e -p "Did you mean to run 'git lock acquire'? [Y/n] " yesno
    if [[ ! "$yesno" == [Nn]* ]]; then
        cmd="acquire"
    fi
fi

CFG_LOCK_REMOTE="lock.remote"
CFG_LOCK_NO_BLOCK_COMMIT="lock.noblockcommit"

REMOTE_CFG="$(git config "$CFG_LOCK_REMOTE")"
NO_BLOCK_COMMIT_CFG="$(git config "$CFG_LOCK_NO_BLOCK_COMMIT")"

REMOTE=${REMOTE_CFG:-origin}
REMOTEPATH="$(git remote -v | grep "^$REMOTE\s" | head -n 1 | cut -d '	' -f 2 | cut -d ' ' -f 1)"
BRANCH="git-lock"
BRANCHPATH="refs/heads/${BRANCH}"
BRANCHREMOTE="refs/remotes/${REMOTE}/${BRANCH}"
LOCKFILE=".git-lock"
MSG="Update git-lock"
TOPLEVEL="$(realpath "$(git rev-parse --show-toplevel)")"
TOPLEVEL_C="$(echo "$TOPLEVEL" | wc -c)"
USER="$(git config user.name) <$(git config user.email)>"

ORIG_PWD="$(pwd -P)"
pushd "$TOPLEVEL" >> /dev/null

# This is useful when running in a hook and git has locked the index
if [[ $1 == "--clone" ]]; then
    clone=1
    shift
fi

git_lock_init_local() {
    echo "Creating locking branch..."
    current=$(cat .git/HEAD)
    git checkout --orphan "$BRANCH" >> /dev/null
    git reset
    # Add a throwaway file to add to our commit
    # An empty commit here can confuse checkout of worktree
    true > "$LOCKFILE"
    git add "$LOCKFILE" >> /dev/null
    git commit -m "Init git-lock" >> /dev/null
    echo "$current" > .git/HEAD
    git reset
    git clean -f "$LOCKFILE" >> /dev/null
}

git_lock_push() {
    git push "$REMOTE" "$BRANCHPATH:$BRANCHPATH" >> /dev/null 2>&1

    if [[ ! $? -eq 0 ]]; then
        echo "Error: Unable to push locking branch to $REMOTE"
        git update-ref "$BRANCHPATH" "$BRANCHREMOTE"
        exit 1
    fi

    echo "Lock updated"
}

git_lock_fetch() {
    git fetch "$REMOTE" "${BRANCH}:${BRANCH}" >> /dev/null

    if [[ ! $? -eq 0 ]]; then
        echo "Error: Unable to sync lock branch from $REMOTE"
        exit 1
    fi
}

git_lock_show() {
    treepath="$1"
    pushd "$treepath" >> /dev/null
    find  -not -path "./.git" -not -path "./.git/*" -type f -size +0 -exec echo -n {}"	" \; -exec  head -n 1 {} \;
    popd >> /dev/null
}

git_lock_check() {
    path="$1"

    if [[ -f "$path" ]] && [[ -s "$path" ]]; then
        owner=$(head -n 1 "$path")
        if [[ $owner != $USER ]]; then
            echo "${owner}"
            exit 1
        fi
    fi
}

git_lock_acquire() {
    path="$1"

    git_lock_fetch

    if [[ -e "$path" ]] && [[ -s "$path" ]]; then
        owner=$(head -n 1 "$path")
        if [[ $owner == $USER ]]; then
            owner="you"
        fi
        echo "Lock is held by ${owner}"
        exit 1
    fi

    mkdir -p "$(dirname "$path")"
    echo "$USER" > "$path"
}

git_lock_release() {
    path="$1"

    git_lock_fetch

    if [[ ! -e "$path" ]] || [[ ! -s "$path" ]]; then
        echo "Lock not held"
        exit 1
    fi

    owner=$(head -n 1 "$path")

    if [[ $owner != $USER ]]; then
        echo "LOCK IS HELD BY SOMEONE ELSE ($owner)"
        read -e -p "Release anyway? [y/N] " yesno
        if [[ ! "$yesno" == [Yy]* ]]; then
            exit 1
        fi
    fi

    > "$path"
}

git fetch >> /dev/null 2>&1

git rev-parse "$BRANCHREMOTE" >> /dev/null 2>&1

if [[ ! $? -eq 0 ]]; then
    git rev-parse "$BRANCH" >> /dev/null 2>&1

    if [[ ! $? -eq 0 ]]; then
        git_lock_init_local
    fi

    git_lock_push
fi

git_lock_fetch

# --- git-lock init is assured ---

if [[ -z "$cmd" ]]; then
    cmd="$1"
    shift
fi

TMPDIR="$(mktemp -d)"
trap "rm -rf \"$TMPDIR\"" EXIT

WORKTREE="$TMPDIR"
mkdir -p "$WORKTREE"

if [[ -z "$clone" ]]; then
    if git show-ref --quiet "$BRANCHPATH"; then
        if ! git worktree add "$WORKTREE" "$BRANCHPATH" >> /dev/null; then
            exit 1
        fi
    else
        echo "Error: Unable to find branch $BRANCHPATH"
        exit 1
    fi
else
    if ! git clone "$REMOTEPATH" --branch "$BRANCH" --single-branch "$WORKTREE" >> /dev/null; then
        echo "Error: Unable to clone $REMOTEPATH"
        if [[ "$NO_BLOCK_COMMIT_CFG" == 1 ]]; then
            exit 0
        else
            echo "COMMIT BLOCKED"
            echo "To allow commits when remote is not available, set:"
            echo "git config $CFG_LOCK_NO_BLOCK_COMMIT 1"
            exit 1
        fi
    fi
fi

function build_tree() {
    local path="$1"
    local entries=""

    for f in "$path"/*; do
        if [[ -d "$f" ]]; then
            local subtree="$(build_tree "$f")"
            if [[ ! -z "$entries" ]]; then entries+=$'\n'; fi
            entries+="040000 tree $subtree	$(basename "$f")"
        fi
    done

    for f in "$path"/*; do
        if [[ -f "$f" ]]; then
            local blob=$(git hash-object -w "$f")
            if [[ ! -z "$entries" ]]; then entries+=$'\n'; fi
            entries+="${sep}100644 blob $blob	$(basename "$f")"
        fi
    done

    echo "$entries" | git mktree
}

if [[ "$cmd" == "show" ]]; then
    git_lock_show "$WORKTREE"
    exit
fi

if [[ "$cmd" == "check" ]]; then
    to_check="$1"
    shift

    if [[ -z "$to_check" ]]; then
        git ls-files -m | while read file; do
            owner="$(git lock check "$file")"
            if [[ ! $? == 0 ]]; then
                echo "(MODIFIED) $file LOCKED BY $owner"
            fi
        done

        git diff --cached --name-only | while read file; do
            owner="$(git lock check "$file")"
            if [[ ! $? == 0 ]]; then
                echo "(STAGED) $file LOCKED BY $owner"
            fi
        done

        exit
    fi

    to_check="$(realpath -P "${ORIG_PWD}/${to_check}")"
    to_check="$(echo "$to_check" | cut -c "$(($TOPLEVEL_C+1))"-)"

    git_lock_check "$WORKTREE/$to_check"
    exit
fi

if [[ "$cmd" == "acquire" ]]; then
    to_lock="$1"
    shift

    if [[ -z "$to_lock" ]]; then
        echo "No file path given"
        exit 1
    fi

    to_lock="$(realpath -P "${ORIG_PWD}/${to_lock}")"
    to_lock="$(echo "$to_lock" | cut -c "$(($TOPLEVEL_C+1))"-)"

    if [[ ! -e "$to_lock" ]]; then
        echo "File does not exist: $to_lock"
        exit 1
    fi

    if [[ ! -f "$to_lock" ]]; then
        echo "Not a regular file: $to_lock"
        exit 1
    fi

    git show "HEAD:$to_lock" >> /dev/null 2>&1

    if [[ ! $? -eq 0 ]]; then
        echo "File is not committed to git: $to_lock"
        exit 1
    fi

    git_lock_acquire "$WORKTREE/$to_lock"

    tree=$(build_tree "$WORKTREE")

    parent=$(git rev-parse "$BRANCHPATH")
    commit=$(echo "$MSG" | git commit-tree $tree -p $parent)

    git update-ref "$BRANCHPATH" "$commit"

    git_lock_push
    exit
fi

if [[ "$cmd" == "release" ]]; then
    to_release="$1"
    shift

    if [[ -z "$to_release" ]]; then
        echo "No file path given"
        exit 1
    fi

    to_release="$(realpath -P "${ORIG_PWD}/${to_release}")"
    to_release="$(echo "$to_release" | cut -c "$(($TOPLEVEL_C+1))"-)"

    git_lock_release "$WORKTREE/$to_release"

    tree=$(build_tree "$WORKTREE")

    parent=$(git rev-parse "$BRANCHPATH")
    commit=$(echo "$MSG" | git commit-tree $tree -p $parent)

    git update-ref "$BRANCHPATH" "$commit"

    git_lock_push
    exit
fi
