#!/bin/bash

git rev-parse --is-inside-work-tree >> /dev/null 2>&1

if [[ ! $? -eq 0 ]]; then
    echo "Not inside a git repo"
    exit
fi

REMOTE_CFG="$(git config lock.remote)"
REMOTE=${REMOTE_CFG:-origin}
BRANCH="git-lock"
BRANCHPATH="refs/heads/${BRANCH}"
BRANCHREMOTE="refs/remotes/${REMOTE}/${BRANCH}"
LOCKFILE=".git-lock"
MSG="Update git-lock"
TOPLEVEL="$(realpath "$(git rev-parse --show-toplevel)")"
TOPLEVEL_C="$(echo "$TOPLEVEL" | wc -c)"
USER="$(git config user.name) <$(git config user.email)>"

ORIG_PWD="$(pwd -P)"
pushd "$TOPLEVEL" >> /dev/null

git_lock_init_local() {
    echo "Creating locking branch..."
    current=$(cat .git/HEAD)
    git checkout --orphan "$BRANCH" >> /dev/null
    git reset
    # Add a throwaway file to add to our commit
    # An empty commit here can confuse checkout of worktree
    true > "$LOCKFILE"
    git add "$LOCKFILE" >> /dev/null
    git commit -m "Init git-lock" >> /dev/null
    echo "$current" > .git/HEAD
    git reset
    git clean -f "$LOCKFILE" >> /dev/null
}

git_lock_push() {
    git push "$REMOTE" "$BRANCHPATH:$BRANCHPATH" >> /dev/null 2>&1

    if [[ ! $? -eq 0 ]]; then
        echo "Error: Unable to push locking branch to $REMOTE"
        git update-ref "$BRANCHPATH" "$BRANCHREMOTE"
        exit
    fi

    echo "Lock updated"
}

git_lock_fetch() {
    git fetch "$REMOTE" "${BRANCH}:${BRANCH}" >> /dev/null

    if [[ ! $? -eq 0 ]]; then
        echo "Error: Unable to sync lock branch from $REMOTE"
        exit
    fi
}

git_lock_show() {
    treepath="$1"
    pushd "$treepath" >> /dev/null
    find -type f -size +0 -exec echo -n {}"	" \; -exec  head -n 1 {} \;
    popd >> /dev/null
}

git_lock_acquire() {
    path="$1"

    git_lock_fetch

    if [[ -e "$path" ]] && [[ -s "$path" ]]; then
        owner=$(head -n 1 "$path")
        echo "Lock is held by ${owner}"
        exit
    fi

    mkdir -p "$(dirname "$path")"
    echo "$USER" > "$path"
}

git_lock_release() {
    path="$1"

    git_lock_fetch

    if [[ ! -e "$path" ]] || [[ ! -s "$path" ]]; then
        echo "Lock not held"
        exit
    fi

    owner=$(head -n 1 "$path")

    if [[ $owner != $USER ]]; then
        echo "LOCK IS HELD BY SOMEONE ELSE ($owner)"
        read -e -p "Release anyway? [y/N] " yesno
        if [[ ! "$yesno" == [Yy]* ]]; then
            exit
        fi
    fi

    > "$path"
}

git fetch >> /dev/null 2>&1

git rev-parse "$BRANCHREMOTE" >> /dev/null 2>&1

if [[ ! $? -eq 0 ]]; then
    git rev-parse "$BRANCH" >> /dev/null 2>&1

    if [[ ! $? -eq 0 ]]; then
        git_lock_init_local
    fi

    git_lock_push
fi

git_lock_fetch

# --- git-lock init is assured ---

cmd="$1"
shift

TMPDIR="$(mktemp -d)"
trap "rm -rf \"$TMPDIR\"" EXIT

WORKTREE="$TMPDIR"
mkdir -p "$WORKTREE"

if git show-ref --quiet "$BRANCHPATH"; then
    git --work-tree="$WORKTREE" checkout "$BRANCHPATH" -- .
fi

function build_tree() {
    local path="$1"
    local entries=""

    for f in "$path"/*; do
        if [[ -d "$f" ]]; then
            local subtree="$(build_tree "$f")"
            if [[ ! -z "$entries" ]]; then entries+=$'\n'; fi
            entries+="040000 tree $subtree	$(basename "$f")"
        fi
    done

    for f in "$path"/*; do
        if [[ -f "$f" ]]; then
            local blob=$(git hash-object -w "$f")
            if [[ ! -z "$entries" ]]; then entries+=$'\n'; fi
            entries+="${sep}100644 blob $blob	$(basename "$f")"
        fi
    done

    echo "$entries" | git mktree
}

if [[ "$cmd" == "show" ]]; then
    git_lock_show "$WORKTREE"
    exit
fi

if [[ "$cmd" == "acquire" ]]; then
    to_lock="$1"
    shift

    if [[ -z "$to_lock" ]]; then
        echo "No file path given"
        exit
    fi

    to_lock="$(realpath -P "${ORIG_PWD}/${to_lock}")"
    to_lock="$(echo "$to_lock" | cut -c "$(($TOPLEVEL_C+1))"-)"

    if [[ ! -e "$to_lock" ]]; then
        echo "File does not exist: $to_lock"
        exit
    fi

    if [[ ! -f "$to_lock" ]]; then
        echo "Not a regular file: $to_lock"
        exit
    fi

    git show "HEAD:$to_lock" >> /dev/null 2>&1

    if [[ ! $? -eq 0 ]]; then
        echo "File is not committed to git: $to_lock"
        exit
    fi

    git_lock_acquire "$WORKTREE/$to_lock"

    tree=$(build_tree "$WORKTREE")

    parent=$(git rev-parse "$BRANCHPATH")
    commit=$(echo "$MSG" | git commit-tree $tree -p $parent)

    git update-ref "$BRANCHPATH" "$commit"

    git_lock_push
    exit
fi

if [[ "$cmd" == "release" ]]; then
    to_release="$1"
    shift

    if [[ -z "$to_release" ]]; then
        echo "No file path given"
        exit
    fi

    to_release="$(realpath -P "${ORIG_PWD}/${to_release}")"
    to_release="$(echo "$to_release" | cut -c "$(($TOPLEVEL_C+1))"-)"

    git_lock_release "$WORKTREE/$to_release"

    tree=$(build_tree "$WORKTREE")

    parent=$(git rev-parse "$BRANCHPATH")
    commit=$(echo "$MSG" | git commit-tree $tree -p $parent)

    git update-ref "$BRANCHPATH" "$commit"

    git_lock_push
    exit
fi
